version: 2.1
description: |
  This orb was created to take out common logic for building, testing and deploying java applications build with gradle.
display:
  home_url: https://github.com/wigryz/custom-orb
  source_url: https://github.com/wigryz/custom-orb

executors:
  default:
    description: |
      If you want to provide a custom environment in your orb, insert your image here.
    docker:
      - image: gradle:<<parameters.tag>>
    parameters:
      tag:
        default: 8.5-jdk21
        description: |
          Pick a specific gradle image variant: https://hub.docker.com/_/gradle/tags
          Keep in mind that this image should have ssh and scp installed.
        type: string


# Why default value of override-content is null? Because "" would lead to invalid if statement.
commands:
  checkout-code:
    description: |
      Checks out code from current branch.
    steps:
      - checkout:
          path: ~/workspace
  run-tests:
    description: Run tests
    parameters:
      override-content:
        type: string
        default: "null"
    steps:
      - run:
          name: "Run tests"
          command: |
            if [ "<<parameters.override-content>>" == "null" ]; then
              gradle test
            else
              <<parameters.override-content>>
            fi
  compile:
    description: Compile application
    parameters:
      override-content:
        type: string
        default: "null"
    steps:
      - run:
          name: "Compile application"
          command: |
            if [ "<<parameters.override-content>>" == "null" ]; then
              gradle assemble
            else
              <<parameters.override-content>>
            fi
  create-executable:
    description: Create java executable file. By default it is done by gradle war.
    parameters:
      override-content:
        type: string
        default: "null"
    steps:
      - run:
          name: "Create java executable file (gradle war)"
          command: |
            if [ "<<parameters.override-content>>" == "null" ]; then
              gradle war
            else
              <<parameters.override-content>>
            fi
  copy-executable-to-deployment:
    description: Copy war file into ./deployment directory
    parameters:
      override-content:
        type: string
        default: "null"
    steps:
      - run:
          name: "Create java executable file (gradle war)"
          command: |
            if [ "<<parameters.override-content>>" == "null" ]; then
              gradle copyWarFileToDeployment
            else
              <<parameters.override-content>>
            fi
  store-artifacts:
    description: Store files at ~/workspace/deployment/ as artifacts
    parameters:
      override-content:
        type: string
        default: "null"
    steps:
      - run:
          name: "Store files at ~/workspace/deployment/ as artifacts"
          command: |
            if [ "<<parameters.override-content>>" == "null" ]; then
              gradle copyWarFileToDeployment
            else
              <<parameters.override-content>>
            fi

  build-with-gradle:
    description: |
      This command runs tests, compiles application and copies war into deployment folder.
      Deployment folder is stored as artifacts. It is also persisted in workspace.
    steps:
      - run:
          name: "Run tests"
          command: gradle test
      - run:
          name: "Compile application"
          command: gradle assemble
      - run:
          name: "gradle war"
          command: gradle war
      - run:
          name: "Copy war file into ./deployment directory"
          command: gradle copyWarFileToDeployment
      - store_artifacts:
          path: ~/workspace/deployment/
      - run:
          name: "List all files in directory ./workspace/deployment"
          command: ls -lA ~/workspace/deployment
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - deployment
  deploy-on-server:
    description: |
      This command deploys created war file and Dockerfile on server via scp.
      It also creates copy of those files in tests, compiles application and copies war into deployment folder.~/backups folder.
    steps:
      - add_ssh_keys:
          fingerprints:
            - << parameters.SSH_FINGERPRINT >>
      - run:
          name: Sending files to application server
          command: |
            scp -o StrictHostKeyChecking=no deployment/ROOT.war << parameters.SSH_USER >>@<< parameters.SSH_HOST >>:current/ROOT.war
    parameters:
      SSH_USER:
        type: string
      SSH_HOST:
        type: string
      SSH_FINGERPRINT:
        type: string

jobs:
  custom-java-build-with-gradle:
    working_directory: ~/workspace
    description: |
      Sample description
    executor: default
    parameters:
      run-tests-override-content:
        type: string
        default: "null"
    steps:
      - checkout-code
      - run-tests:
          override-content: << parameters.run-tests-override-content >>
      - compile
      - create-executable
      - copy-executable-to-deployment
      - store-artifacts

examples:
  example:
    description: |
      Sample example description.
    usage:
      version: "2.1"
      orbs:
        <orb-name>: <namespace>/<orb-name>@1.2.3
      workflows:
        use-my-orb:
          jobs:
            - <orb-name>/<job-name>
